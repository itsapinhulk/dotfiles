# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

_IS_PLATFORM_MACOS="no"
if [[ "$(uname)" == 'Darwin' ]]; then
    _IS_PLATFORM_MACOS="yes"
fi

export XDG_CONFIG_HOME=$HOME/.config
export XDG_CACHE_HOME=$HOME/.cache
export XDG_DATA_HOME=$HOME/.local/share
export XDG_STATE_HOME=$HOME/.local/state

export FIGNORE=$FIGNORE:DS_Store

if ls --version &> /dev/null; then
    # Only create alias for supported ls variants
    alias ls="ls -F --color=auto"
fi

alias ll="ls -ltr"
alias la="ls -altr"
alias lh="ls -altrh"

if which --version &> /dev/null; then
    # only create alias for supported which variants
    alias which="alias | which --tty-only --read-alias --show-dot --show-tilde"
fi

if [[ -f ~/.bash_profile ]]; then
  alias refresh_bash_profile='source ~/.bash_profile'
elif [[ -f ~/.bashrc ]]; then
  alias refresh_bash_profile='source ~/.bashrc'
fi

if [[ ${_IS_PLATFORM_MACOS} == "yes" ]]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

umask u=rwx,g=rx,o=

export TERM=xterm-256color

export PATH=$PATH:/usr/local/bin

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=100000

# Extended regex matching
shopt -s extglob

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Set up dotfiles directory
if command -v realpath &> /dev/null; then
    _DOTFILES_DIR=$(cd $(dirname $(realpath ${BASH_SOURCE[0]})) && cd .. && pwd)
else
    _DOTFILES_DIR=$(cd $(dirname ${BASH_SOURCE[0]}) && cd .. && pwd)
fi

if command -v dircolors &> /dev/null; then
    eval `dircolors ${_DOTFILES_DIR}/ext/dircolors-solarized/dircolors.256dark`
else
  export CLICOLOR=1
  export LSCOLORS=GxFxCxDxBxegedabagaced
fi

function source_git_helpers() {
  GIT_PS1_SHOWDIRTYSTATE=1
  GIT_PS1_SHOWUNTRACKEDFILES=1
  GIT_PS1_SHOWUPSTREAM="verbose"
  GIT_PS1_SHOWCOLORSHINT=1
  PROMPT_COMMAND='__git_ps1 "$(_ps1_pre)" "$(_ps1_post)"'
}

if command -v brew &>/dev/null; then
  HOMEBREW_PREFIX="$(brew --prefix)"
  if [[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
    source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
  else
    for COMPLETION in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*; do
      [[ -r "${COMPLETION}" ]] && source "${COMPLETION}"
    done
  fi
fi

if command -v jj &> /dev/null; then
  source <(jj util completion bash)
fi

function source_conda_install() {
  if command -v conda &> /dev/null; then
    eval "$(conda "shell.$(basename "${SHELL}")" hook)"
  else
    echo "Missing conda installation"
  fi
}

function source_nvm_install() {
  if command -v brew &> /dev/null; then
    export NVM_DIR="${XDG_CONFIG_HOME}/nvm"
    # This loads nvm
    [[ -s "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh" ]] && source "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh" 
    # This loads nvm bash_completion
    [[ -s "${HOMEBREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm" ]] && source "${HOMEBREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm" 
  else
    echo "Missing nvm installation"
  fi
}

# Set default editor
EDITOR=nvim

# Set colorful prompt, run `colorgrid` see color values.
_USERNAME_COLOR='\[\033[01;38;05;196m\]'   # red
_PROMPT_COLOR='\[\033[01;38;05;046m\]'     # green
_VCS_COLOR='\[\033[01;38;05;208m\]'        # yellow / orange
_CONDA_COLOR='\[\033[01;38;05;005m\]'      # magenta
_TIME_COLOR='\[\033[01;38;05;105m\]'       # purple
_DIRECTORY_COLOR='\[\033[01;38;05;033m\]'  # blue
_RESET_COLOR='\[\033[00m\]'

_PS1_USER_HOST="${_USERNAME_COLOR}[\u@\h]"
_PS1_WORKDIR="${_DIRECTORY_COLOR}\w"

# Needs to be a function since the value is dynamic
function _ps1_time() {
  echo "${_TIME_COLOR}($(date '+%b-%d %H:%M'))"
}

# Needs to be a function since a lot of values are dynamic
# The split between pre and post is for the usage with git
function _ps1_pre() {
  # Unfortuantely conda prompt includes a space at the end, we need to
  # follow its convention in including its space
  _PS1_WITH_CONDA="${_CONDA_COLOR}${CONDA_PROMPT_MODIFIER}"
  echo "$(_ps1_time) ${_PS1_USER_HOST} ${_PS1_WORKDIR} ${_PS1_WITH_CONDA} ${_VCS_COLOR}"
}

# Grapes by default
PS1_OS_ICON=$'\xf0\x9f\x8d\x87'
if [[ ${_IS_PLATFORM_MACOS} == "yes" ]]; then
  # Apple for MacOS
  PS1_OS_ICON=$'\xf0\x9f\x8d\x8e'
fi

function _ps1_os_icon() {
  echo "${PS1_OS_ICON}"
}

function _ps1_post() {
  echo "\n$(_ps1_os_icon) ${_PROMPT_COLOR}\\\$ ${_RESET_COLOR}"
}

function _regular_ps1() {
  history -a  # Append to history right away
  PS1="$(_ps1_pre) $(_ps1_post)"
}

PROMPT_COMMAND='_regular_ps1'

# Use current input when searching with arrow keys
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

# Useful bash functions

function apt_upgrade_packages() {
  sudo apt update && sudo apt --yes upgrade && sudo apt --yes autoremove
}

# Test performance of disk backing current folder, no idea how accurate this methodology is
function disk_performance() {
    local _file_size=256kB

    if [[ $# == 1 ]]; then
        _file_size=$1
    fi

    local _count=2k
    if [[ $# == 2 ]]; then
        _count=$2
    fi

    filename=./disk_perf.$RANDOM.out

    echo "Running with ${_file_size}, ${_count} times"
    dd if=/dev/zero of="$filename" conv=fdatasync bs=${_file_size} count=${_count};
    rm -f "$filename"
}

# Single command to start all tmux sessions
function tmux_start_server() {
    for _file in $(ls ${XDG_CONFIG_HOME}/tmuxp/); do
        local _session_name="${_file%.*}"
        # Load the session in the background
        tmuxp load "${_session_name}" -d
    done
}

# Simpler alias to load a tmux session
alias tmux_attach="tmux attach-session -t"
alias tmux_kill_server="tmux kill-server"

# This following functions were originally taken from -
# https://raw.githubusercontent.com/JohnMorales/dotfiles/master/colors/24-bit-color.sh
#
#   These functions echoes a bunch of 24-bit color codes
#   to the terminal to demonstrate its functionality.
#   The foreground escape sequence is ^[38;2;<r>;<g>;<b>m
#   The background escape sequence is ^[48;2;<r>;<g>;<b>m
#   <r> <g> <b> range from 0 to 255 inclusive.
#   The escape sequence ^[0m returns output to default

function _setBackgroundColor()
{
    printf '\x1b[48;2;%s;%s;%sm' $1 $2 $3
}

function _resetOutput()
{
    echo -en "\x1b[0m\n"
}

# Gives a color $1/255 % along HSV
# Who knows what happens when $1 is outside 0-255
# Echoes "$red $green $blue" where
# $red $green and $blue are integers
# ranging between 0 and 255 inclusive
function _rainbowColor()
{
    let h=$1/43
    let f=$1-43*$h
    let t=$f*255/43
    let q=255-t

    if [ $h -eq 0 ]
    then
        echo "255 $t 0"
    elif [ $h -eq 1 ]
    then
        echo "$q 255 0"
    elif [ $h -eq 2 ]
    then
        echo "0 255 $t"
    elif [ $h -eq 3 ]
    then
        echo "0 $q 255"
    elif [ $h -eq 4 ]
    then
        echo "$t 0 255"
    elif [ $h -eq 5 ]
    then
        echo "255 0 $q"
    else
        # execution should never reach here
        echo "0 0 0"
    fi
}

function colorgrid() {
    local iter=16
    while [[ $iter -lt 52 ]]; do
        local second=$(($iter+36))
        local third=$(($second+36))
        local four=$(($third+36))
        local five=$(($four+36))
        local six=$(($five+36))
        local seven=$(($six+36))
        if [[ $seven -gt 250 ]];then
            local seven=$(($seven-251));
        fi

        echo -en "\033[38;5;${iter}m█ "
        printf "%03d" $iter
        echo -en "   \033[38;5;${second}m█ "
        printf "%03d" $second
        echo -en "   \033[38;5;${third}m█ "
        printf "%03d" $third
        echo -en "   \033[38;5;${four}m█ "
        printf "%03d" $four
        echo -en "   \033[38;5;${five}m█ "
        printf "%03d" $five
        echo -en "   \033[38;5;${six}m█ "
        printf "%03d" $six
        echo -en "   \033[38;5;${seven}m█ "
        printf "%03d" $seven

        iter=$(($iter+1))
        printf '\033[00m\r\n'
    done

    echo
    awk 'BEGIN{
        s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
        for (colnum = 0; colnum<77; colnum++) {
            r = 255-(colnum*255/76);
            g = (colnum*510/76);
            b = (colnum*255/76);
            if (g>255) g = 510-g;
            printf "\033[48;2;%d;%d;%dm", r,g,b;
            printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
            printf "%s\033[0m", substr(s,colnum+1,1);
        }
        printf "\n";
    }'

    # Display all(?) 24bit colors
    echo

    for i in `seq 0 127`; do
        _setBackgroundColor $i 0 0
        echo -en " "
    done
    _resetOutput
    for i in `seq 255 -1 128`; do
        _setBackgroundColor $i 0 0
        echo -en " "
    done
    _resetOutput

    for i in `seq 0 127`; do
        _setBackgroundColor 0 $i 0
        echo -n " "
    done
    _resetOutput

    for i in `seq 255 -1 128`; do
        _setBackgroundColor 0 $i 0
        echo -n " "
    done
    _resetOutput

    for i in `seq 0 127`; do
        _setBackgroundColor 0 0 $i
        echo -n " "
    done
    _resetOutput
    for i in `seq 255 -1 128`; do
        _setBackgroundColor 0 0 $i
        echo -n " "
    done
    _resetOutput

    for i in `seq 0 127`; do
      _setBackgroundColor `_rainbowColor $i`
      echo -n " "
    done
    _resetOutput

    for i in `seq 255 -1 128`; do
      _setBackgroundColor `_rainbowColor $i`
      echo -n " "
    done
    _resetOutput

}

function decompress() {
  if [[ "$#" -ne 1 ]]; then
    echo "Usage: decompress <file>"
    return 1
  fi

  local _full_file_path="$1"
  local _file_name="$(basename ${_full_file_path})"

  if [[ ${_file_name} =~ .*\.tar$ ]]; then
    local _dir_name=$(echo "${_file_name}" | sed 's/\.tar$//')
    (
      set -x;
      mkdir "${_dir_name}"
      tar -xvf "${_full_file_path}" -C "${_dir_name}"
    )
  elif [[ ${_file_name} =~ .*\.tar\.gz$ ]]; then
    local _dir_name=$(echo "${_file_name}" | sed 's/\.tar\.gz$//')
    (
      set -x;
      mkdir "${_dir_name}"
      tar -xvzf "${_full_file_path}" -C "${_dir_name}"
    )
  elif [[ ${_file_name} =~ .*\.tar\.bz2$ ]]; then
    local _dir_name=$(echo "${_file_name}" | sed 's/\.tar\.bz2$//')
    (
      set -x;
      mkdir "${_dir_name}"
      tar -xvjf "${_full_file_path}" -C "${_dir_name}"
    )
  elif [[ ${_file_name} =~ .*\.zip$ ]]; then
    local _dir_name=$(echo "${_file_name}" | sed 's/\.zip$//')
    (
      set -x;
      mkdir "${_dir_name}"
      unzip "${_full_file_path}" -d "${_dir_name}"
    )
  else
    echo "Unsupported file extension - '${_file_name}'"
    return 1
  fi
}
