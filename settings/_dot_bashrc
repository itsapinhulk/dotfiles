# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

export XDG_CONFIG_HOME=$HOME/.config

if ls --version &> /dev/null; then
    # Only create alias for supported ls variants
    alias ls="ls -F --color=auto"
fi

alias ll="ls -ltr"
alias la="ls -altr"
alias lh="ls -altrh"

if which --version &> /dev/null; then
    # only create alias for supported which variants
    alias which="alias | which --tty-only --read-alias --show-dot --show-tilde"
fi

alias refreshbashprofile='source ~/.bashrc'

umask u=rwx,g=rx,o=

export TERM=xterm-256color

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=100000

# Extended regex matching
shopt -s extglob

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Use dotfiles directory

if command -v realpath &> /dev/null; then
    _DOTFILES_DIR=$(cd $(dirname $(realpath ${BASH_SOURCE[0]})) && cd .. && pwd)
else
    _DOTFILES_DIR=$(cd $(dirname ${BASH_SOURCE[0]}) && cd .. && pwd)
fi

if command -v dircolors &> /dev/null; then
    eval `dircolors ${_DOTFILES_DIR}/ext/dircolors-solarized/dircolors.256dark`
fi

# All bash completions
if [[ -f "/etc/profile.d/bash_completion.sh" ]]; then
    source "/etc/profile.d/bash_completion.sh"
    source "${_DOTFILES_DIR}/ext/tmux-bash-completion/completions/tmux"
    source "/usr/share/bash-completion/completions/git"
fi

# Setup git related helpers
source "/etc/bash_completion.d/git-prompt"
GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWUNTRACKEDFILES=1
GIT_PS1_SHOWUPSTREAM="verbose"
GIT_PS1_SHOWCOLORSHINT=1

EDITOR=nvim

# Set colorful prompt, which includes git information
_NAME_RED='\[\033[01;38;5;196m\]'
_PROMPT_GREEN='\[\033[01;38;5;046m\]'
_GIT_ORANGE='\[\033[01;38;5;208m\]'
_DIRECTORY_BLUE='\[\033[01;38;5;033m\]'
_COLOR_RESET='\[\033[00m\]'

_PS1_PRE="${_NAME_RED}[\u@\h] ${_DIRECTORY_BLUE}\w${_GIT_ORANGE}"
_PS1_POST="\n${_PROMPT_GREEN}\\\$ ${_COLOR_RESET}"
PROMPT_COMMAND='__git_ps1 "${_PS1_PRE}" "${_PS1_POST}"'

# Use current input when searching with arrow keys
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

# Useful bash functions

function colorgrid() {
    local iter=16
    while [[ $iter -lt 52 ]]; do
        local second=$(($iter+36))
        local third=$(($second+36))
        local four=$(($third+36))
        local five=$(($four+36))
        local six=$(($five+36))
        local seven=$(($six+36))
        if [[ $seven -gt 250 ]];then
            local seven=$(($seven-251));
        fi

        echo -en "\033[38;5;${iter}m█ "
        printf "%03d" $iter
        echo -en "   \033[38;5;${second}m█ "
        printf "%03d" $second
        echo -en "   \033[38;5;${third}m█ "
        printf "%03d" $third
        echo -en "   \033[38;5;${four}m█ "
        printf "%03d" $four
        echo -en "   \033[38;5;${five}m█ "
        printf "%03d" $five
        echo -en "   \033[38;5;${six}m█ "
        printf "%03d" $six
        echo -en "   \033[38;5;${seven}m█ "
        printf "%03d" $seven

        iter=$(($iter+1))
        printf '\033[00m\r\n'
    done

    echo
    awk 'BEGIN{
        s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
        for (colnum = 0; colnum<77; colnum++) {
            r = 255-(colnum*255/76);
            g = (colnum*510/76);
            b = (colnum*255/76);
            if (g>255) g = 510-g;
            printf "\033[48;2;%d;%d;%dm", r,g,b;
            printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
            printf "%s\033[0m", substr(s,colnum+1,1);
        }
        printf "\n";
    }'
}

function disk_performance() {
    local _file_size=256kB

    if [[ $# == 1 ]]; then
        _file_size=$1
    fi

    local _count=2k
    if [[ $# == 2 ]]; then
        _count=$2
    fi

    filename=./disk_perf.$RANDOM.out

    echo "Running with ${_file_size}, ${_count} times"
    dd if=/dev/zero of="$filename" conv=fdatasync bs=${_file_size} count=${_count};
    rm -f "$filename"
}
